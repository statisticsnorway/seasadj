name: $(Build.SourceBranch)-$(date:yyyyMMdd)$(rev:.r)
# Pipeline triggers on any branch and tag on push/merge/commit
trigger:
  branches:
    include:
      - 'master'
  tags:
    include:
      - '*'

# Pipeline triggers on pull-request against any branch and tag
pr:
  branches:
    include:
      - 'master'

# Pipeline will be run on this base image
pool:
  vmImage: 'ubuntu-latest'

# Variables global to this pipeline
# https://docs.microsoft.com/en-us/azure/devops/pipelines/process/variables
variables:
  # Variables defined in Pipelines->Library->Variable Groups in your project in
  # Azure Pipelines
  - group: Hemmeligheter
  # Variables defined here
  - name: fullSha
    value: '$(Build.SourceVersion)'
  - name: imageHost
    value: 'https://eu.gcr.io/'
  - name: imageName
    value: 'eu.gcr.io/prod-bip/ssb/dapla/x13-seat'
  - name: repoName
    value: 'prod-bip/ssb/dapla/x13-seat'
  - name: imageTagBeforeVulnerabilityScan
    value: 'imagescan-$(Build.SourceBranchName)-$(fullSha)'
  - name: imageTagAfterVulnerabilityScan
    value: $(Build.SourceBranchName)-$(fullSha)
  - name:  MAVEN_CACHE_FOLDER
    value: $(Pipeline.Workspace)/.m2/repository
  - name: MAVEN_OPTS
    value: '-Dmaven.repo.local=$(MAVEN_CACHE_FOLDER)'

resources:
  repositories:
    # See https://github.com/statisticsnorway/ssb-developer-guide/blob/master/docs/azure_pipeline_doc.md#templating
    # for info on how to use the templates repo
    - repository: templates
      type: github
      name: statisticsnorway/azure-pipelines-templates
      # The version of the repo on GitHub. Change to needed version
      ref: refs/tags/1.1.12
      # Service connection in the Stratus project on Pipelines
      # with access to the template repository. Change to correct
      # endpoint
      endpoint: statisticsnorway

# Job which runs mvn test and verify, Sonar Analysis (if branch is master), mvn install,
# builds Docker image, pushes this to GCR and checks for any image vulnerabilities
jobs:
  - job: buildTestDockerBuildDockerPush
    displayName: 'Test/build app and Dockerimage'
    # Job condition: Run these jobs on any branch, but not on tags
    condition: not(startsWith(variables['Build.SourceBranch'], 'refs/tags/'))
    # Steps in this Job
    steps:
      - script: |
          sudo apt install sbt
          sbt assembly
        

      - template: 'docker/docker-build-image-and-push-to-gcr.yml@templates'
        parameters:
          imageName: $(imageName)
          repoName: $(repoName)
          Dockerfile: docker/Dockerfile
      # Download file with json-key to GCR as a l


  # Pull and retag docker image. Will only run if it is a tag-operation on the repo.
  # See https://github.com/statisticsnorway/azure-pipelines-templates/blob/master/docker/docker-tag-for-production.yml
  # and deploy_to_production.md
  - template: docker/docker-tag-for-production.yml@templates
    parameters:
      tagToTag: 'master-$(fullSha)'
      gcrImageName: $(imageName)
